# CoreFx
# source - determines input source
# match determines the output destination
# filter determines the event processing pipelines

# MiscFx
# @include includes other files
# system sets system wide configuration
# label directives group the output and filter for internal routing to help reduce complexity
<source>
  @type http
  port 9936
</source>
# make sure /etc/rsyslog.d/50-default.conf sends logs here
<source>
  @type syslog
  port 5140
  tag system
</source>

# <source>
#   @type tail
#   format json
#   path /var/log/ossec/alerts.json
#   pos_file /fluentd/ossec_alerts.pos
#   tag ossec.**
# </source>

# <source>
#   @type tail
#   path /home/winston/logs/moltres.log
#   pos_file /var/log/td-agent/moltres.pos
#   tag moltres.**
# </source>

# The source submits events into the routing engine
# an event consists of 3 entities
# - tag: string separated by . (eg. myapp.access). Determines the direction of routing. 
# - time: genesis
# - record: JSON

<filter system.local0**>
  @type record_transformer
  # remove_keys $['decoder'], $['id'], $['rule']['sidid'], $['rule']['firedtimes'], $['rule']['groups'] 
</filter>


<filter moltres.**>
  @type record_transformer

  <record>
   host_param "#{Socket.gethostname}"
  </record>
</filter>


<filter system.authpriv.**>
  @type grep
  <regexp>
    key ident
    pattern /^sudo$/
  </regexp>

  <regexp>
    key message
    pattern /COMMAND/
  </regexp>
</filter>

<filter system.authpriv.**>
  @type parser
  reserve_time true

  key_name message
  <parse>
    @type regexp
    expression /USER=(?<sudoer>[^ ]+) ; COMMAND=(?<command>.*)$/
  </parse>
</filter>



# events pass through all filters that matches tags
# events pass through only the first match directive that matches tags

<match system.local0**>
  @type mongo
  host onyx
  port 27017
  database logs
  collection ossec

  # authentication
  user mon
  password h234p2uil190bHps
  <buffer>
    # flush
    flush_interval 3s
  </buffer>
</match>

<match system.authpriv.**>
  @type mongo
  host onyx
  port 27017
  database logs
  collection sudo

  user mon
  password h234p2uil190bHps
  <buffer>
    # flush
    flush_interval 3s
  </buffer>
  # @type stdout
</match>

<match system.**>
  @type mongo
  host onyx
  port 27017
  database logs
  collection sys

  user mon
  password h234p2uil190bHps
  <buffer>
    # flush
    flush_interval 3s
  </buffer>
</match>


<match moltres.**>
  @type mongo
  host onyx
  port 27017
  database logs
  collection moltres

  user mon
  password h234p2uil190bHps
   <buffer>
    # flush
    flush_interval 3s
  </buffer>
</match>


# <label @mainstream>
#   <match docker.**>
#     @type file
#     @id   output_docker1
#     path         /fluentd/log/docker.*.log
#     symlink_path /fluentd/log/docker.log
#     append       true
#     time_slice_format %Y%m%d
#     time_slice_wait   1m
#     time_format       %Y%m%dT%H%M%S%z
#   </match>
# </label>

<match **>
  @type mongo
  host onyx
  port 27017
  database logs
  collection fluent

  user mon
  password h234p2uil190bHps
   <buffer>
    # flush
    flush_interval 3s
  </buffer>
</match>


# <match **>
#   @type stdout
# </match>

# match looks for events with a matching tag and processes them
# type specifies the output plugin
# file and forward are the most common output destinations
# matches execute from top down in if else style,
# lower matches will not succeed it higer match succeeds

<system>
  process_name sweetlilbird
</system>
